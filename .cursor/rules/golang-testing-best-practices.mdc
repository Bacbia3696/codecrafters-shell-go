---
description: 
globs: 
alwaysApply: false
---
# Golang Testing Best Practices

Effective testing is crucial for building reliable and maintainable Go applications. This document outlines best practices for writing tests in this project.

## 1. Test File Convention
- Test files must be named `*_test.go` and reside in the same package as the code they are testing.
- For example, tests for `[app/internal/parser/parser.go](mdc:app/internal/parser/parser.go)` are located in `[app/internal/parser/parser_test.go](mdc:app/internal/parser/parser_test.go)`.

## 2. Test Functions
- Test functions must start with the prefix `Test` and take `*testing.T` as their only parameter (e.g., `func TestParseLine(t *testing.T)`).
- Use descriptive names for test functions that clearly indicate what they are testing.

## 3. Table-Driven Tests
- For testing functions with various inputs and expected outputs, use table-driven tests. This approach keeps tests concise and makes it easy to add new test cases.
- The `TestParseLine` function in `[app/internal/parser/parser_test.go](mdc:app/internal/parser/parser_test.go)` provides an excellent example of this pattern.
  ```go
  func TestMyFunction(t *testing.T) {
      tests := []struct {
          name    string
          input   string
          want    string
          wantErr bool
      }{
          // test cases
          {
              name:  "empty input",
              input: "",
              want:  "default",
              wantErr: false,
          },
          // ... more cases
      }

      for _, tt := range tests {
          t.Run(tt.name, func(t *testing.T) {
              got, err := MyFunction(tt.input)
              if (err != nil) != tt.wantErr {
                  t.Errorf("MyFunction() error = %v, wantErr %v", err, tt.wantErr)
                  return
              }
              if got != tt.want {
                  t.Errorf("MyFunction() = %v, want %v", got, tt.want)
              }
          })
      }
  }
  ```

## 4. Assertions and Reporting Errors
- Use `t.Errorf()` or `t.Fatalf()` to report test failures. `Fatalf` will stop the current test function's execution.
- Provide clear and informative error messages that help diagnose the failure quickly. Include actual and expected values.
- Consider using helper functions for common assertions to reduce boilerplate, but avoid overly complex assertion libraries unless truly necessary.

## 5. Test Coverage
- Aim for good test coverage, but prioritize quality over quantity. Focus on testing critical paths, edge cases, and error conditions.
- Use `go test -cover` to check your test coverage.
- Strive to test behavior rather than implementation details. This makes tests less brittle to refactoring.

## 6. Testability
- Write code with testability in mind. This often involves:
    - Using interfaces for dependencies (see `[golang-interfaces-solid.mdc](mdc:.cursor/rules/golang-interfaces-solid.mdc)`).
    - Keeping functions small and focused (see `[golang-srp-package-structure.mdc](mdc:.cursor/rules/golang-srp-package-structure.mdc)`).
    - Avoiding global state.

## 7. Types of Tests
- **Unit Tests**: Focus on testing individual functions or components in isolation.
- **Integration Tests**: Test the interaction between multiple components or packages. These may require more setup.
- Consider build tags (e.g., `//go:build integration`) to separate long-running integration tests from fast unit tests.

## 8. Parallel Tests
- If tests are independent and do not share state, you can run them in parallel using `t.Parallel()` to speed up test execution.
  ```go
  func TestMyParallelizableFunction(t *testing.T) {
      t.Parallel() // Mark this test as safe for parallel execution
      // ... test logic
  }
  ```

## 9. Avoid External Dependencies in Unit Tests
- Unit tests should be fast and self-contained. Avoid dependencies on external systems like databases, networks, or file systems.
- Use mocks, stubs, or fakes for these dependencies. Interfaces are key to enabling this.

By following these testing best practices, we ensure our Go codebase remains robust, reliable, and easy to evolve.
