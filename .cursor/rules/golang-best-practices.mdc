---
description: 
globs: 
alwaysApply: false
---
# Golang Best Practices

This document outlines general best practices for writing Go code in this project. Adherence to these guidelines helps maintain code quality, readability, and maintainability.

## 1. Formatting
- **`gofmt`/`goimports`**: Always format your code using `gofmt` or `goimports` before committing. This ensures consistent code style across the project. Most IDEs can be configured to do this automatically on save.

## 2. Naming Conventions
- **Package Names**: Keep package names short, concise, and all lowercase. Avoid using underscores or mixedCaps (camelCase). The name should be descriptive of the package's purpose. For example, `app/internal/parser` is a good example.
- **Variables and Functions**: Use `camelCase` for variable and function names. Exported (public) names must start with an uppercase letter (e.g., `ParseLine`). Unexported (private) names start with a lowercase letter.
- **Interfaces**: Interface names often end with `-er` (e.g., `Reader`, `Writer`) if they represent a single method. For more complex interfaces, choose a name that accurately describes its purpose.

## 3. Error Handling
- **Explicit Checks**: Always check for errors. If a function returns an error, handle it immediately.
  ```go
  value, err := someFunction()
  if err != nil {
      // log error, return error, or handle appropriately
      return fmt.Errorf("someFunction failed: %w", err)
  }
  // use value
  ```
- **Error Wrapping**: When returning an error from a called function, wrap it with `fmt.Errorf("context: %w", err)` to provide more context, using the `%w` verb to preserve the original error type if needed.
- **Sentinel Errors**: For specific, well-known error conditions, define sentinel errors using `errors.New` or `fmt.Errorf`.

## 4. Simplicity and Clarity
- **Readability**: Write code that is easy to read and understand. Avoid overly complex or "clever" solutions.
- **Brevity**: Go code tends to be more verbose than some languages, but aim for clarity over excessive brevity that obscures meaning.
- **Avoid Unnecessary Abstractions**: Only introduce abstractions (like interfaces or complex structures) when they provide clear benefits for decoupling, testability, or extensibility.

## 5. Comments
- **Document Exported APIs**: All exported functions, types, and variables should have clear Go doc comments explaining their purpose, parameters, and return values.
- **Explain Non-Obvious Code**: Add comments to explain complex logic, workarounds, or business rules that aren't immediately obvious from the code itself. Avoid commenting on obvious code.

## 6. Package Design
- **Cohesion**: Group related functionality within the same package. A package should have a clear, single responsibility (see SRP).
- **Avoid Circular Dependencies**: Design package relationships to avoid circular imports.
- **`internal` Packages**: Use `internal` directories (e.g., `app/internal/`) for code that should only be importable by code within the same parent directory tree. This is good for enforcing boundaries within your application.

## 7. Concurrency
- **Goroutines and Channels**: Use goroutines for concurrent operations and channels for communication and synchronization between them.
- **Simplicity**: Keep concurrent code as simple as possible. Complex concurrent logic is hard to debug.
- **Race Detector**: Use the Go race detector (`go test -race`, `go run -race`) during development and testing to find data races.

## 8. Testing
- **Unit Tests**: Write unit tests for your packages. Test files are named `_test.go` (e.g., `app/internal/parser/parser_test.go`).
- **Table-Driven Tests**: Use table-driven tests for testing multiple scenarios of a function, as seen in `[parser_test.go](mdc:app/internal/parser/parser_test.go)`.
- **Coverage**: Aim for good test coverage, but prioritize testing critical and complex parts of your code.

## 9. Resource Management
- **Defer for Cleanup**: Use `defer` to ensure resources (like files or network connections) are closed or released, e.g., `defer file.Close()`.

## 10. Avoid Globals
- Minimize the use of global variables. If necessary, pass dependencies explicitly. This improves testability and makes code easier to reason about.

---
Refer to [Effective Go](mdc:httpsg:/go.dev/doc/effective_go) for more comprehensive guidelines from the Go team.
